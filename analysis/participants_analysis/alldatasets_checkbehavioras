import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import seaborn as sns
plt.style.use('default')
sns.set_palette("husl")

try:
    df = pd.read_csv("behavioral_metrics_all_simulated.csv")
    print(f"Loaded data with {len(df)} participants")
    print(f"Datasets: {df['dataset'].unique()}")
    print(f"Columns: {list(df.columns)}")
except FileNotFoundError:
    print("Error.")
    exit()

# behavioral metrics to plot   we dont have 'avg_rt' in the new datasets
behavioral_metrics = [
    'stay_after_reward',
    'switch_rate',
    'perseveration',
    'stay_after_plus_plus',
    'stay_after_plus_minus',
    'stay_after_minus_plus',
    'stay_after_minus_minus',
    'avg_reward'
]

# Create figure with 4 rows and 2 columns
fig, axes = plt.subplots(4, 2, figsize=(16, 8))
axes = axes.flatten()

# Plot each behavioral metric
for i, metric in enumerate(behavioral_metrics):
    ax = axes[i]
    
    # Calculate means and standard errors for each dataset
    dataset_stats = []
    datasets = df['dataset'].unique()
    
    for dataset in datasets:
        data = df[df['dataset'] == dataset][metric].dropna()
        if len(data) > 0:
            mean_val = data.mean()
            sem_val = data.sem()  # Standard error of the mean
            dataset_stats.append({
                'dataset': dataset,
                'mean': mean_val,
                'sem': sem_val,
                'n': len(data)
            })
    
    stats_df = pd.DataFrame(dataset_stats)
    
    if not stats_df.empty:
        bars = ax.bar(stats_df['dataset'], stats_df['mean'],
                     yerr=stats_df['sem'], capsize=5, alpha=0.7)
        
        for j, (bar, n) in enumerate(zip(bars, stats_df['n'])):
            height = bar.get_height() + stats_df.iloc[j]['sem']
            ax.text(bar.get_x() + bar.get_width()/2., height + height*0.02,
                   f'n={n}', ha='center', va='bottom', fontsize=8)
        
        ax.set_title(f'{metric.replace("_", " ").title()}', fontsize=12, fontweight='bold')
        ax.set_xlabel('Dataset')
        ax.set_ylabel('Value')
        ax.tick_params(axis='x', rotation=45)
        
        ax.grid(axis='y', alpha=0.3)
        
        if len(stats_df) > 0:
            y_min = min(stats_df['mean'] - stats_df['sem']) * 0.95
            y_max = max(stats_df['mean'] + stats_df['sem']) * 1.1
            ax.set_ylim(y_min, y_max)
    else:
        ax.set_title(f'{metric.replace("_", " ").title()} - No Data', fontsize=12)
        ax.text(0.5, 0.5, 'No data available', ha='center', va='center', transform=ax.transAxes)

plt.tight_layout()
plt.suptitle('Behavioral Metrics Across Datasets (Mean Â± SEM)', fontsize=16, fontweight='bold', y=1.02)
plt.show()






for metric in behavioral_metrics:
    print(f"\n{metric.replace('_', ' ').upper()}:")
    print("-" * 50)
    for dataset in df['dataset'].unique():
        data = df[df['dataset'] == dataset][metric].dropna()
        if len(data) > 0:
            print(f"{dataset:>15}: Mean={data.mean():.4f}, SEM={data.sem():.4f}, "
                  f"SD={data.std():.4f}, n={len(data)}")